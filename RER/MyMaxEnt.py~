'''
MyMaxEnt.py
MaxEnt Classifier
Author: Anantharaman Narayana Iyer
Date: 21 Nov 2014
'''
import json
import pickle
import numpy
import math
#import build_history
from rer_feature_functions import *
from random import randint
import create_tuples

from scipy.optimize import minimize as mymin 
import datetime

# ----------------------------------------------------------------------------------------
# maxent implementation
# ----------------------------------------------------------------------------------------
class MyMaxEnt(object):
    def __init__(self, datast, function_obj, reg_lambda = 0.01, pic_file = None): 
        # history_tuples is of the form: ((ta, tb, wn, i), tag) where ta = tag t-2, tb = tag t-1, wn = pointer to a sentence, i = current index
        # function_list is of the form: [(pointer_to_function_f1, tag_for_f1), (pointer_to_function_f2, tag_for_f2)...]
        # reg_lambda = regularization coefficient
        # pic_file = Name of file where the classifier is pickled
		#[sentence,(tags),relation]<----- list of
        self.datast = datast
        self.func = function_obj
	#print self.func
        self.reg = reg_lambda
        self.dataset = None # this will be set by create_dataset
        self.tag_set = ["price_query","feature_query","comparison","interest_intent","irrelevant"]#self.func.supported_tags #None # this will be also be set by create_dataset - this is the set of all tags
#"offensive","greeting","agreement","disagreement","acknowledgement"
        self.create_dataset()
        self.dim = self.dataset.shape[1] #len(self.dataset[0])
        self.num_examples = self.dataset.shape[0]
        self.model = numpy.array([0 for d in range(self.dim)]) # initialize the model to all 0
        self.pic_file = pic_file
        return

    def create_dataset(self):
        self.dataset = []
        self.all_data = {}
	#print len(self.datast)
        rand_no = randint(0,(len(self.datast)-600))
        for h in self.datast[rand_no:]: # h represents each element of datast ie. [sentence,(tags),relation]   [:9000]
            for relation in self.tag_set:
                feats = self.all_data.get(relation, [])
                val = self.get_feats(h, relation)
		#print val
                feats.append(val)
                self.all_data[relation] = feats
                if (h[1] == relation):    # hand-tag relation
                    self.dataset.append(val)         # dataset is a list of all the vector for h[0]and h[1]tag in history tuple .
        for k, v in self.all_data.items():
            self.all_data[k] = numpy.array(v)  
        self.dataset = numpy.array(self.dataset)
        return

    def get_feats(self, xi, relation): # xi is the history tuple and tag is y belonging to Y (the set of all labels
        # xi is of the form: history where history is a 4 tuple by itself
        # self.func is the function object
        return self.func.evaluate(xi, relation)    # calls the feature function -- returns a tuple of vectors ie. result from all the feature function

    def train(self):
        dt1 = datetime.datetime.now()                   
        print ('before training: ', dt1) 
	print self.model,self.cost        
        params = mymin(self.cost, self.model, method = 'L-BFGS-B') #, jac = self.gradient) # , options = {'maxiter':100}
        self.model = params.x
        dt2 = datetime.datetime.now()
        print ('after training: ', dt2, '  total time = ', (dt2 - dt1).total_seconds())
        
        if self.pic_file != None:
            pickle.dump(self.model, open(self.pic_file, "wb"))
        return

    def p_y_given_x(self, xi, relation): # given xi determine the probability of y - note: we have all the f(x, y) values for all y in the dataset
        normalizer = 0.0
        feat = self.get_feats(xi, relation)
        dot_vector = numpy.dot(numpy.array(feat), self.model)
        for t in self.tag_set:
            feat = self.get_feats(xi, t)
            dp = numpy.dot(numpy.array(feat), self.model)
            if dp == 0:
                normalizer += 1.0
            else:
                normalizer += math.exp(dp)
        if dot_vector == 0:
            val = 1.0
        else:
            val = math.exp(dot_vector) # 
        result = float(val) / normalizer
        return result

    def classify(self, xi):      # xi = datast
        if self.pic_file != None:
            self.model = pickle.load(open(self.pic_file, "rb"))
        maxval = 0.0
        result = None
        for t in self.tag_set: # t = relation
            val = self.p_y_given_x(xi, t)    # probab of a relation given sentence
            if val >= maxval:
                maxval = val
                result = t
        return result

    def cost(self, params):
        self.model = params
        sum_sqr_params = sum([p * p for p in params]) # for regularization
        reg_term = 0.5 * self.reg * sum_sqr_params                
        dot_vector = numpy.dot(self.dataset, self.model)
        
        empirical = numpy.sum(dot_vector) # this is the emperical counts            
        expected = 0.0
        
        for j in range((self.num_examples)):
            mysum = 0.0
            for tag in self.tag_set: # get the jth example feature vector for each tag
                fx_yprime = self.all_data[tag][j] #self.get_feats(self.h_tuples[j][0], tag)
                '''
                dot_prod = 0.0
                for f in range(len(fx_yprime)):
                    if fx_yprime[f] != 0:
                        dot_prod += self.model[f]
                '''
                dot_prod = numpy.dot(fx_yprime, self.model)
                if dot_prod == 0:
                    mysum += 1.0
                else:
                    mysum += math.exp(dot_prod)
            expected += math.log(mysum)
        print ("Cost = ", (expected - empirical + reg_term))
        return (expected - empirical + reg_term)

    def gradient(self, params):
        self.model = params        
        gradient = []
        for k in range(self.dim): # vk is a m dimensional vector
            reg_term = self.reg * params[k]
            empirical = 0.0
            expected = 0.0
            for dx in self.dataset:
                empirical += dx[k]
            for i in range(self.num_examples):
                mysum = 0.0 # exp value per example
                for t in self.tag_set: # for each tag compute the exp value
                    fx_yprime = self.all_data[t][i] #self.get_feats(self.h_tuples[i][0], t)

                    # --------------------------------------------------------
                    # computation of p_y_given_x
                    normalizer = 0.0
                    dot_vector = numpy.dot(numpy.array(fx_yprime), self.model)
                    for t1 in self.tag_set:
                        feat = self.all_data[t1][i]
                        dp = numpy.dot(numpy.array(feat), self.model)
                        if dp == 0:
                            normalizer += 1.0
                        else:
                            normalizer += math.exp(dp)
                    if dot_vector == 0:
                        val = 1.0
                    else:
                        val = math.exp(dot_vector) # 
                    prob = float(val) / normalizer
                    # --------------------------------------------------------
                    
                    mysum += prob * float(fx_yprime[k])                    
                expected += mysum
            gradient.append(expected - empirical + reg_term)
        return numpy.array(gradient)

# def __init__(self, history_tuples, function_obj, reg_lambda = 0.01, pic_file = None): 
tag_list = ["price_query","feature_query","comparison","interest_intent","irrelevant"]		
#data = json.loads(open(json_file).read())['root']
#(history_list, sents, expected, ) = build_history.build_history(data,tag_list)
datast = create_tuples.getData()
fun_obj = FeatureFunctions(tag_list)

pickle_file = r"all_data.p"
#maxent = mymaxent.MyMaxEnt(history_list,func_obj,reg_lambda=0.001, pic_file = pickle_file);
maxent = MyMaxEnt(datast,fun_obj,reg_lambda = 0.01, pic_file = pickle_file)
TRAIN = int(raw_input("Enter 1 for Train, 0 to use pickeled file:  "))
if TRAIN == 1:
        maxent.train();



#maxent = MyMaxEnt(datast,fun_obj,reg_lambda = 0.01, pic_file = None)
#maxent.train()
result=[]
for i in datast[1200:1550]:
    result.append((i,maxent.classify(i)))


correct = 0
total = 0
preC =0
#new_tag_list = ["agreement","acknowledgement","price_query","feature_query","comparison","interest_intent","irrelevant"]
new_tag_list= ['price_query', 'feature_query', 'comparison', 'interest_intent', 'irrelevant', 'disagreement', 'greeting', 'agreement', 'acknowledgement']	
reCall = dict(zip(new_tag_list,[[0,0] for i in range(len(new_tag_list))]))

for i in result:
	if(i[0][1]==i[1] and i[1]!="irrelevant"): correct +=1
	if(i[1]!="irrelevant"): total+=1
	if(i[0][1]==i[1]) : preC +=1
	reCall[i[0][1]][0] +=1
	if(i[0][1]==i[1]): reCall[i[0][1]][1] +=1
	print i[0][1],"\t:\t",i[1],"\t\t",i[0][2],i[0][0] 


#print correct ,"/",total
print 

print "Precision : " ,preC," / ",len(result)," = ",1.0*preC/len(result)
print "reCall"
for i in reCall:
	if(reCall[i][0]!=0):
		print i,"\t:\t",reCall[i][1],"/",reCall[i][0]," = ",1.0*reCall[i][1]/reCall[i][0]


if __name__ == "__main__":
    pass
